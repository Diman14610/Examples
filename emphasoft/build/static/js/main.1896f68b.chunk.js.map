{"version":3,"sources":["Users.js","App.js","serviceWorker.js","index.js"],"names":["Users","id","username","first_name","last_name","App","useState","user","setUser","name","setName","pass","setPass","className","placeholder","type","onChange","e","target","value","onClick","length","includes","toUpperCase","replace","Promise","re","reg","fetch","method","body","JSON","stringify","password","headers","then","json","catch","token","e2","console","log","document","getElementById","style","display","alert","parse","sort","cur","next","container","btnShow","filter","v","toLocaleLowerCase","substring","map","i","key","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.1896f68b.chunk.js","sourcesContent":["import React from 'react'\r\n\r\n\r\nconst Users = ({ id, username, first_name, last_name }) => {\r\n    return (\r\n        <>\r\n            <tr>\r\n                <td>{id}</td>\r\n                <td>{username}</td>\r\n                <td>{first_name}</td>\r\n                <td>{last_name}</td>\r\n            </tr>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Users","import React, { useState, useEffect } from 'react';\nimport Users from './Users'\n\n\nconst App = () => {\n  const [user, setUser] = useState([])\n  const [name, setName] = useState('')\n  const [pass, setPass] = useState('')\n\n  /*   useEffect(() => {\n      let token = new Promise((re, reg) => {\n        let AuthToken = { username: 'test_super', password: 'Nf<U4f<rDbtDxAPn' }\n  \n        fetch('http://emphasoft-test-assignment.herokuapp.com/api-token-auth/', { method: 'POST', body: JSON.stringify(AuthToken), headers: { 'Content-Type': 'application/json' } })\n          .then(e => re(e.json()))\n          .catch(e => reg(e))\n      })\n  \n      token.then(e => {\n        fetch(`http://emphasoft-test-assignment.herokuapp.com/api/v1/users`, { method: 'GET', headers: { 'Authorization': `Token ${e.token}` } })\n          .then(e2 => e2.json())\n          .then(e2 => setUser(e2))\n          .catch(e2 => console.log(e2))\n      })\n    }, [user]) */\n\n\n  const btnAuth = () => {\n    if (name !== ' ' & name !== '' & name === 'test_super') {\n      if (pass.length >= 8 && pass.includes(pass[0].toUpperCase()) && pass.replace(/\\D/g, '').length > 0 & pass === 'Nf<U4f<rDbtDxAPn') {\n        let token = new Promise((re, reg) => {\n          let AuthToken = { username: 'test_super', password: 'Nf<U4f<rDbtDxAPn' }\n\n          fetch('http://emphasoft-test-assignment.herokuapp.com/api-token-auth/', { method: 'POST', body: JSON.stringify(AuthToken), headers: { 'Content-Type': 'application/json' } })\n            .then(e => re(e.json()))\n            .catch(e => reg(e))\n        })\n\n        token.then(e => {\n          fetch(`http://emphasoft-test-assignment.herokuapp.com/api/v1/users`, { method: 'GET', headers: { 'Authorization': `Token ${e.token}` } })\n            .then(e2 => e2.json())\n            .then(e2 => setUser(e2))\n            .catch(e2 => console.log(e2))\n        })\n\n        document.getElementById('table').style.display = 'table'\n        document.getElementById('auth').style.display = 'none'\n      }\n      else {\n        alert('Пароль введён не правильно! Пароль должен быть с заглавной буквы, иметь длину не менее 8 символов, и содержать хотя бы 1 цифру')\n      }\n    }\n    else {\n      alert('Пользователь не найден')\n    }\n  }\n\n  const btnAscending = () => {\n    setUser(JSON.parse(JSON.stringify(user.sort((cur, next) => cur.id - next.id))))\n  }\n  const btnDescending = () => {\n    setUser(JSON.parse(JSON.stringify(user.sort((cur, next) => next.id - cur.id))))\n  }\n\n  const btnSortAsc = () => {\n    setUser(JSON.parse(JSON.stringify(user.sort((cur, next) => cur.username > next.username ? 1 : -1))))\n  }\n  const btnSortDes = () => {\n    setUser(JSON.parse(JSON.stringify(user.sort((cur, next) => cur.username < next.username ? 1 : -1))))\n\n  }\n\n  const btnShow = () => {\n    let container = document.getElementById('filters-container')\n\n    if (container.style.display === 'none') {\n      container.style.display = 'block'\n    }\n    else {\n      container.style.display = 'none'\n    }\n\n  }\n\n  return (\n    <>\n      <div id='auth' className='Auth'>\n        <input placeholder='name' type='text' onChange={e => setName(e.target.value)} />\n        <input placeholder='password' type='password' onChange={e => setPass(e.target.value)} />\n\n        <button onClick={() => btnAuth()}>Auth</button>\n      </div>\n\n\n      <table id='table' style={{ display: \"none\" }}>\n        <thead>\n          <tr>\n            <th>\n              id\n              <button onClick={() => btnAscending()}>&uarr;</button>\n              <button onClick={() => btnDescending()}>&darr;</button>\n            </th>\n            <th>\n              username\n              <button onClick={() => btnShow()}>Фильтры</button>\n\n              <div id='filters-container' style={{ display: \"none\" }}>\n                <div>\n                  <input type='text' onChange={\n                    (e) => setUser(user.filter((v) => {\n                      if (v.username.toLocaleLowerCase() === e.target.value.toLocaleLowerCase()) {\n                        return v.username += '<--'\n                      }\n                      else {\n                        if (v.username.includes('<--')) {\n                          return v.username = v.username.substring(0, v.username.length - 3)\n                        }\n                        return v.username\n                      }\n                    }))\n                  } />\n\n                  <button onClick={() => btnSortAsc()}>A-Z</button>\n                  <button onClick={() => btnSortDes()}>Z-A</button>\n                </div>\n              </div>\n            </th>\n            <th>first_name</th>\n            <th>last_name</th>\n          </tr>\n        </thead>\n\n        <tbody>\n          {user.map((v, i) => <Users {...v} key={i} />)}\n        </tbody>\n      </table>\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './main.css'\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}